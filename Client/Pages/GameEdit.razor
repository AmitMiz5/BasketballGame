@page "/GameEdit/{gameId:int}"
@using template.Shared.Models.Answer
@using template.Shared.Models.Game
@using template.Shared.Models.Question
@using template.Shared.Models

@inject HttpClient Http
@inject NavigationManager Nav
<PageTitle>עריכת משחק</PageTitle>


<div>
	<h1 class="page__title">עריכת משחק</h1>

	<div style="border-radius: 10px; margin-top: 10px; background-color: #276075; color: white; padding: 5px 15px; display: flex; align-items: center; width: 400px; height: 60px; box-sizing: border-box; border: 1px solid #692346;">


		<div style="font-size: 16px; font-weight: bold; margin-bottom: 2px; color:white">
			<span>שם המשחק:</span>
			<span>@game.GameName</span>
		</div>
		<div class="GamesList__vertical-divider"></div>
		<div style="font-size: 16px; font-weight: bold; margin-bottom: 2px; color:white">
			<span>@game.QuestionTime</span>
			<span>שניות לשאלה</span>
			 
		</div>
		<GameSettings game="game" ImageSrc="/Icons/settingsWhite.svg" OnGameUpdated="LoadGame" OnShowToast="ShowToast" />
	</div>



	<div style="display:flex;margin-top:30px;">
		<div style="flex: 1; margin-right: 20px;">


			@if (selectedQuestion != null)
			{
				<AddQuestion GameId="@gameId"
							 QuestionId="@selectedQuestion.QuestionId"
							 questionToAdd="selectedQuestion.questionToAdd"
							 answers="selectedQuestion.answers"
							 OnQuestionUpdated="@(async () => await LoadQuestions())"
							 OnShowToast="@(toastMessage => ShowToast(toastMessage))" />
			}
			else
			{
				<AddQuestion GameId="@gameId"
							 questionToAdd="new QuestionToAdd()"
							 answers="new List<AnswerToAdd> { new AnswerToAdd(), new AnswerToAdd(), new AnswerToAdd(), new AnswerToAdd(), new AnswerToAdd(), new AnswerToAdd() }"
							 OnQuestionUpdated="@(async () => await LoadQuestions())"
							 OnShowToast="@(toastMessage => ShowToast(toastMessage))" />
			}
		</div>

		<div style="margin-right: 20px; margin-top: 20px;">
			<div style="display:flex">
				<button class="base-button" style="flex: 1;" @onclick="NavigateToGamesList">חזרה למשחקים שלי</button>
				<PublishButton game="game" OnShowToast="ShowToast" />


			</div>


			<div style="border-radius: 10px; margin-top: 10px; background-color: #276075; color: white; padding: 5px 15px; display: flex; align-items: center; height: 60px; box-sizing: border-box;border: 1px solid #692346;">
				<div style="flex: 1; display: flex; flex-direction: column; padding-left: 10px; text-align: right;">
					<div style="font-size: 16px; font-weight: bold; margin-bottom: 1px;">מאגר שאלות</div>
					<div style="display: flex; align-items: center; font-size: 12px;">
						@if (MyQuestionList.Count >= 10)
						{
							<span style="display: inline-flex; align-items: center; justify-content: center; background-color: white; color: green; border-radius: 50%; width: 16px; height: 16px; font-size: 12px; margin-left: 5px;">
								<svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="green" viewBox="0 0 24 24" width="24px" height="24px">
									<path d="M12 0C5.383 0 0 5.383 0 12s5.383 12 12 12 12-5.383 12-12S18.617 0 12 0zm-1.2 18L5 11.2l1.4-1.4 4.4 4.4L17.6 7l1.4 1.4L10.8 18z" />
								</svg>
							</span>
						}
						else
						{
							<span style="display: inline-flex; align-items: center; justify-content: center; background-color: white; color: red; border-radius: 50%; width: 16px; height: 16px; font-size: 8px; margin-left: 5px;">
								<svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="red" viewBox="0 0 24 24" width="24px" height="24px">
									<path d="M12 0C5.383 0 0 5.383 0 12s5.383 12 12 12 12-5.383 12-12S18.617 0 12 0zm5.656 16.242l-1.414 1.414L12 13.414l-4.242 4.242-1.414-1.414L10.586 12l-4.242-4.242 1.414-1.414L12 10.586l4.242-4.242 1.414 1.414L13.414 12l4.242 4.242z" />
								</svg>
							</span>
						}
						<span>לפרסום משחק יש ליצור לפחות 10 שאלות</span>
					</div>
				</div>

				<div style="font-size: 20px; font-weight: bold; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%;">
					<div>@MyQuestionList.Count</div>
					<div style="font-size: 12px; padding-left: 5px;">שאלות</div>
				</div>
			</div>



			<div style="height:65vh;position: relative;margin-top:15px;">
				@if (MyQuestionList != null && MyQuestionList.Count > 0)
				{
					<div style="height:90%;overflow-y:scroll;">

						@foreach (QuestionDetails question in MyQuestionList)
						{
							<div style="background-color: #27607566;border-radius:5px; margin: 5px; padding: 5px; display: flex; align-items: center; justify-content: space-between;">
								<div style="width:75%;overflow: hidden;
white-space: nowrap;
text-overflow: ellipsis;">
									@question.QuestionText
								</div>

								<div style="display: flex; gap: 10px;">
									<Tooltip TooltipText="עריכת השאלה">
										<button style="border: none; padding: 5px; border-radius: 3px;"
												@onclick="() => LoadQuestionDetails(question.ID)">
											<img src="/Icons/EditIcon.svg" alt="Edit" style="height: 24px; width: 24px; border: none" />
										</button>
									</Tooltip>

									<ConfirmPopup TitleText="מחיקת שאלה"
												  BodyText=@($"האם אתה בטוח שברצונך למחוק את שאלה '{question.QuestionText}'?")
												  ConfirmButtonText="מחק"
												  CancelButtonText="בטל"
												  OnConfirmClick="() => DeleteQuestion(question.ID)">
										<OpenButton>
											<Tooltip TooltipText="מחיקת שאלה">
												<button style="border: none; padding: 5px; border-radius: 3px;">
													<img src="/Icons/DeleteIcon.svg" alt="Delete" style="height: 24px; width: 24px; border: none" />
												</button>
											</Tooltip>
										</OpenButton>
									</ConfirmPopup>
								</div>
							</div>
						}
					</div>

					@if (selectedQuestion != null)
					{
						<button class="base-button" style="position: absolute; bottom: 0; left: 50%; transform: translateX(-50%);" @onclick="() => { selectedQuestion = null; }"> הוספת שאלה חדשה</button>

					}
				}
			</div>

		</div>
	</div>
</div>

<ToastComponent Type="@msgType" Message="@msg" @key="toastKey" />

@code {
	[Parameter]
	public int gameId { get; set; }

	string msg = "";
	string msgType = "info";
	Guid toastKey = Guid.NewGuid();

	List<QuestionDetails> MyQuestionList = new List<QuestionDetails>();
	QuestionData selectedQuestion;

	GameQuestionRequest gameDto = new GameQuestionRequest();

	private GameTable game = new GameTable();


	protected override async Task OnInitializedAsync()
	{
		await LoadGame();
		await LoadQuestions();
	}

	private void NavigateToGamesList()
	{
		Nav.NavigateTo("GamesList");
	}

	public async Task LoadGame()
	{
		var response = await Http.GetAsync("api/GameData/GetGameData/" + gameId);

		if (response.IsSuccessStatusCode)
		{
			game = await response.Content.ReadFromJsonAsync<GameTable>();
		}

	}

	public async Task LoadQuestions()
	{
		selectedQuestion = null;
		gameDto.GameID = gameId;

		var response = await Http.PostAsJsonAsync("api/GameData/GetQuestionList", gameDto);

		if (response.IsSuccessStatusCode)
		{
			MyQuestionList = await response.Content.ReadFromJsonAsync<List<QuestionDetails>>();
		}
		else
		{
			MyQuestionList = new List<QuestionDetails>();
		}

	}

	public async Task LoadQuestionDetails(int questionID)
	{
		var response = await Http.GetAsync("api/GameData/getQuestion/" + questionID);
		string error = await response.Content.ReadAsStringAsync();

		if (response.IsSuccessStatusCode)
		{
			selectedQuestion = await response.Content.ReadFromJsonAsync<QuestionData>();
			selectedQuestion.QuestionId = questionID;
		}
		else
		{
			ShowToast(new ToastMessage { Message = "Error retrieving question details: " + error, Type = "error" });
		}
	}

	private async Task DeleteQuestion(int questionID)
	{
		var response = await Http.DeleteAsync($"api/GameData/deleteQuestion/{gameId}/{questionID}");
		if (response.IsSuccessStatusCode)
		{
			ShowToast(new ToastMessage { Message = "שאלה נמחקה בהצלחה", Type = "success" });
			MyQuestionList.RemoveAll(q => q.ID == questionID);
			StateHasChanged();
			await LoadQuestions();
		}
		else
		{
			ShowToast(new ToastMessage { Message = "תקלה במחיקת שאלה, נסה שנית", Type = "error" });
		}
	}

	private void ShowToast(ToastMessage toastMessage)
	{
		msg = toastMessage.Message;
		msgType = toastMessage.Type;
		toastKey = Guid.NewGuid();
		StateHasChanged();
	}

	private class QuestionData
	{
		public QuestionToAdd questionToAdd { get; set; }
		public List<AnswerToAdd> answers { get; set; }
		public int QuestionId { get; set; }
	}
}
