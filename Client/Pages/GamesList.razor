@page "/GamesList"
@using template.Shared.Models.Game;
@inject HttpClient Http;
@inject NavigationManager Nav;

<PageTitle>המשחקים שלי!</PageTitle>

<h1 class="GamesList__title">המשחקים שלי</h1>
<h4 class="GamesList__subtitle">סך כל המשחקים: @MyGamesList.Count</h4>



<div class="GamesLists_newgame">
    <p class="form-header">הוספת משחק חדש</p>
    <EditForm Model="gameToAdd" OnValidSubmit="CreateGame" class="create-game-form">
        <DataAnnotationsValidator />
        <div class="form-field-inline">
            <input type="text" @bind="gameToAdd.GameName" class="input-field" placeholder="הכנס שם משחק" required minlength="2" />

            <input type="submit" value="יצירת משחק" class="base-button" />
        </div>
        <ValidationMessage For="@(() => gameToAdd.GameName)" class="error-message" />
    </EditForm>

</div>



@if (MyGamesList != null)
{
    <div class="GamesList__container">
        @foreach (GameTable game in MyGamesList)
        {
            <div class="GamesList__game__card">
                <div class="GamesList__game__header">
                    <h3 class="GamesList__game__name">@game.GameName</h3>
                </div>

                <div class="GamesList__game__details">
                    <div class="GamesList__game__info">
                        <div><strong>קוד משחק:</strong> @game.GameCode</div>
                        <div class="GamesList__vertical-divider"></div>
                        <div><strong>כמות שאלות:</strong> @game.QuestionsAmount</div>
                        <div class="GamesList__vertical-divider"></div>
                        <div><strong>תאריך עדכון אחרון:</strong> @game.LastUpdated.ToString("dd.MM.yy HH:mm")</div>
                    </div>

                    <div class="GamesList__game__actions">
                        <div>
                            <PublishButton game="game" OnGameUpdated="@LoadGames" />
                        </div>
                        <Tooltip TooltipText="עריכת המשחק">
                            <button class="GamesList__action__button" @onclick="() => NavigateToEditPage(game.ID)">
                                <img src="/Icons/EditIcon.svg" alt="Edit" class="GamesList__action__icon" />
                            </button>
                        </Tooltip>

                        <GameSettings game="game" OnGameUpdated="@LoadGames" />

                        <ConfirmPopup TitleText="מחיקת משחק"
                                      BodyText=@($"האם אתה בטוח שברצונך למחוק את משחק '{game.GameName}'?")
                                      ConfirmButtonText="מחק"
                                      CancelButtonText="בטל"
                                      OnConfirmClick="() => DeleteGame(game)">
                            <OpenButton>
                                <Tooltip TooltipText="מחיקת משחק">
                                    <button class="GamesList__action__button">
                                        <img src="/Icons/DeleteIcon.svg" alt="Delete" class="GamesList__action__icon" />
                                    </button>
                                </Tooltip>
                            </OpenButton>
                        </ConfirmPopup>

                        <ConfirmPopup TitleText="שכפול משחק"
                                      BodyText=@($"האם אתה בטוח שברצונך לשכפל את משחק '{game.GameName}'?")
                                      ConfirmButtonText="שכפל"
                                      CancelButtonText="בטל"
                                      OnConfirmClick="() => CopyGame(game.ID)">
                            <OpenButton>
                                <Tooltip TooltipText="שכפול משחק">
                                    <button class="GamesList__action__button">
                                        <img src="/Icons/CopyIcon.svg" alt="Copy" class="GamesList__action__icon" />
                                    </button>
                                </Tooltip>
                            </OpenButton>
                        </ConfirmPopup>

                    </div>
                </div>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(msg))
    {
        <p>@msg</p>
        <input type="button" value="reload" @onclick=Navigate />
    }
}

@code {

    [CascadingParameter]
    public int UserId { get; set; }

    List<GameTable> MyGamesList = new List<GameTable>();
    string msg = "";
    GameToAdd gameToAdd = new GameToAdd();

    private bool showWarning = false;
    private GameTable? selectedGame = null;

    private void ShowDeleteWarning(GameTable game)
    {
        selectedGame = game;
        showWarning = true;
        Console.WriteLine($"ShowDeleteWarning called for game: {game.GameName}, showWarning set to {showWarning}");
    }

    private async Task HandleDeleteConfirmed()
    {
        if (selectedGame != null)
        {
            Console.WriteLine($"Deleting game: {selectedGame.GameName}");
            await DeleteGame(selectedGame);
            selectedGame = null;
            showWarning = false;
        }
    }

    private void HandleCancel()
    {
        Console.WriteLine("Delete canceled");
        selectedGame = null;
        showWarning = false;
    }

    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        var newGameRes = await Http.PostAsJsonAsync("api/Table/addGame/", gameToAdd);
        if (newGameRes.IsSuccessStatusCode == true)
        {
            msg = "";
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            GameTable newGame = await newGameRes.Content.ReadFromJsonAsync<GameTable>();

            newGame.LastUpdated = DateTime.Now;
            MyGamesList.Insert(0,newGame);
            gameToAdd.GameName = "";
        }
        else
        {
            string error = await newGameRes.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                msg = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                msg = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                msg = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
            case "It's Not Your Game":
                msg = "המשחק הזה אינו שלך...";
                break;
            case "This game cannot be published":
                msg = "המשחק אינו מאושר לפרסום";
                break;
            case "Update Failed":
                msg = "בעיה בעדכון המשחק";
                break;
        }
    }

    private async Task CopyGame(int originalGameId)
    {
        // var requestData = new
        // {
        //     originalGameId = originalGameId
        // };

        var copyGameResponse = await Http.PostAsync($"api/Table/copyGame/{originalGameId}", null);

        if (copyGameResponse.IsSuccessStatusCode)
        {
            msg = "";

            GameTable copiedGame = await copyGameResponse.Content.ReadFromJsonAsync<GameTable>();

            copiedGame.LastUpdated = DateTime.Now;

            MyGamesList.Add(copiedGame);
        }
        else
        {
            string error = await copyGameResponse.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    private async Task DeleteGame(GameTable game)
    {
        GameDelete gameToDelete = new GameDelete();
        gameToDelete.ID = game.ID;
        gameToDelete.GameCode = game.GameCode;

        var saveResponse = await Http.PostAsJsonAsync("api/Table/deletGame", gameToDelete);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            msg = "המשחק נמחק בהצלחה";
            await LoadGames(); // Refresh the game list after deletion
        }
        else
        {
            msg = "בעיה במחיקה " + saveResponse.StatusCode;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    public async Task LoadGames()
    {
        // פנייה לקונטרולר ושליפת המשחקים
        var gamesRes = await Http.GetAsync("api/Table/GetUserGames");
        if (gamesRes.IsSuccessStatusCode == true)
        {
            // השמת הנתונים במופע שפתחנו
            MyGamesList = await gamesRes.Content.ReadFromJsonAsync<List<GameTable>>();
        }
        else
        {
            // נטפל במצבים שהיוזר לא רשאי לגשת אל המידע ונאכלס משתנה של הודעה בהתאם
            string error = await gamesRes.Content.ReadAsStringAsync();
            switch (error)
            {
                case "No games for this user":
                    msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                    break;
                case "user is not authenticated":
                    msg = "ארעה בעיה בעת אימות המשתמש";
                    break;
            }
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    private void NavigateToEditPage(int gameId)
    {
        Nav.NavigateTo($"/GameEdit/{gameId}");
    }
}
