@inject HttpClient Http
@inject NavigationManager Nav
@using template.Shared.Models.Answer
@using template.Shared.Models.Game
@using template.Shared.Models.Question
@using template.Shared.Models

<EditForm Model="questionToAdd" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />


	<div style="width: 100%;">@*  כותרת משתנה לפי סוג הבקשה *@
		<label for="question-text" style="display: block; font-weight: bold; font-size: 18px;">
			@(QuestionId != null ? "עריכת שאלה:" : "הוספת שאלה חדשה:")
		</label>
	</div>

	<div>
		<div style="display:flex; align-items: center;"> @* סימון למשתמש האם עומד בתנאים לשמירת שאלה *@
			@if (!string.IsNullOrEmpty(questionToAdd.QuestionText) && questionToAdd.QuestionText.Length >= 2)
			{
				<CheckIcon />

			}

			else
			{
				<ErrorIcon />
			}
			<div> גזע השאלה חייב להכיל לפחות תו אחד שאינו רווח</div>
		</div>
		<div>
			<div style="display: flex; gap: 10px; align-items: center;">

				<div style="flex-grow: 1;"> @* הכנסת טקסט לשאלה *@
					<CustomInputText @bind-Value="questionToAdd.QuestionText" maxLength="150" midLength="145" minLength="2" placeholder="גזע השאלה" id="question-text" style="width: 100%; height: 89px; background: #FFF5F5; border: 1px solid #000000; border-radius: 8px; white-space: normal; overflow-wrap: break-word;resize: none;" textArea="true" />
				</div>

				<div style="margin-top: -14px;">
					@* הכנסת תמונה לשאלה *@
					@if (string.IsNullOrEmpty(questionToAdd.QuestionPhoto))
					{
						<label for="FileInputID" style="box-sizing: border-box; width: 150px; height: 89px; background: #FFF5F5; border: 1px solid #000000; color: #0f1111; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; font-family: 'Amazon Ember', sans-serif; font-size: 13px; text-align: center; text-decoration: none; user-select: none; -webkit-user-select: none; touch-action: manipulation; border-radius: 8px;" role="button">
							<img src="./Icons/ImgIcon.png" alt="Upload Icon" style="width: 40px; height: 40px; margin-bottom: 5px;">
							<div>בחר תמונה</div>
							<div style="font-size: 10px; color: #666;">(עד גודל של 2MB)</div>
						</label>
					}
					<InputFile id="FileInputID" OnChange="UploadQuestionImg" hidden />

					@if (!string.IsNullOrEmpty(questionToAdd.QuestionPhoto)) @* שדה להצגת התמונה הנבחרה *@
					{
						<div style="position: relative; display: inline-block;">
							@if (questionToAdd.QuestionPhoto.Contains(".png"))
							{
								<img src="/uploadedFiles/@questionToAdd.QuestionPhoto" alt="Uploaded Image"
									 style="width: 150px; height: 89px; border-radius: 8px; object-fit: contain;" />
							}
							else
							{
								<img src="data:image/png;base64,@questionToAdd.QuestionPhoto" alt="Uploaded Image" style="width: 150px; height: 89px; border-radius: 8px; object-fit: contain;" />
							}

							<span class="remove-image" @onclick="() => { questionToAdd.QuestionPhoto = null; }"><img src="./Icons/DeleteIcon.svg" alt="Delete" style="width:18px;height:18px;" /></span>
						</div>
					}
				</div>

			</div>
		</div>
	</div>


	<div style="width: 100%;">
		@* כותרת תשובות *@
		<label for="question-text" style="display: block; font-weight: bold; font-size: 18px;">
			תשובות
		</label>
	</div>

	<div style="display: flex; gap: 20px ; margin-bottom:10px;">
		@* בדיקה לצורך הצגת תנאים לשמירה למשתמש *@

		@{
			int answersWithContentCount = answers.Count(answer => !string.IsNullOrEmpty(answer.AnswerContent) && answer.AnswerContent.Length >= 2);
			bool hasCorrectAnswer = answers.Any(answer => answer.IsCorrect);

		}

		<div style="display:flex; align-items: center;">
			@if (answersWithContentCount >= 2)
			{
				<CheckIcon />
				<span>לפחות 2 שאלות עם תוכן</span>
			}
			else
			{
				<ErrorIcon />

				<span>לפחות 2 שאלות עם תוכן</span>
			}
		</div>

		<div style="display:flex; align-items: center;">
			@if (hasCorrectAnswer)
			{
				<CheckIcon />

				<span>לפחות תשובה אחת נכונה</span>
			}
			else
			{
				<ErrorIcon />

				<span>לפחות תשובה אחת נכונה</span>
			}
		</div>
	</div>


	<div style="width:85%;margin-top: 30px; display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">
		@* הוספת בלוקים להכנסת תוכן לתשובות- טקסט או תמונה *@
		@for (int i = 0; i < answers.Count; i++)
		{
			var index = i;

			<div class="answer-container"
				 style="width: 200px; height: 100px; position: relative; margin-bottom: 15px; border: 1px dashed #000; border-radius: 8px; background-color: #FFF5F5;"
				 @onclick='() => {
                 if(string.IsNullOrEmpty(answers[index].AnswerContent)){
                     answers[index].AnswerContent = "";
                 }
             }'>

				<div style="position: absolute; top: -13px; left: -15px; width: 30px; height: 30px; border-radius: 50%; border: 1px solid white; cursor: pointer;display: flex; align-items: center; justify-content: center; background-color: @(answers[index].IsCorrect ? "#4CAF50" : "#D9D9D9");"
				@onclick:stopPropagation
					 @onclick="() => {ToggleCheckbox(index);}">

					@if (answers[index].IsCorrect)
					{
						<span style="color: white; font-size: 14px;">&#10003;</span>
					}
				</div>
				@if (!answers[index].IsPhoto)
				{
					<div class="answer-section text-side" @onclick='() => {
                 if(string.IsNullOrEmpty(answers[index].AnswerContent)){
                     answers[index].AnswerContent = " ";
                 }
                  }'>
						@if (!answers[index].IsPhoto && !string.IsNullOrEmpty(answers[index].AnswerContent))
						{
							<CustomInputText isBlackLabel="true" @bind-Value="answers[index].AnswerContent" maxLength="50" midLength="40" minLength="2" placeholder="מלל תשובה" id="@($"answerContent-{index}")" style="width: 100%; height: 100%; background: #FFF5F5; border: 1px solid #000000; border-radius: 8px; white-space: normal; overflow-wrap: break-word;resize: none;" textArea="true" />
						}
						@if (string.IsNullOrEmpty(answers[index].AnswerContent))
						{
							<span class="hover-text"><img src="./Icons/Text.png" alt="Text Icon" style="width: 50px; height: 50px;"></span>
						}
					</div>
				}


				@if (answers[index].IsPhoto || string.IsNullOrEmpty(answers[index].AnswerContent))

				{
					<label class="answer-section image-side" for="@($"answerImage-{index}")">
						<InputFile id="@($"answerImage-{index}")" OnChange="@(e => UploadAnswerImg(index, e))" hidden />
						@if (answers[index].IsPhoto && answers[index].AnswerContent.Contains(".png"))
						{
							<img src="/uploadedFiles/@answers[index].AnswerContent" alt="Uploaded Answer Image" style="max-width: 100%; max-height: 100px; border-radius: 4px;" />
						}
						else if (answers[index].IsPhoto)
						{
							<img src="data:image/png;base64,@answers[index].AnswerContent" alt="Uploaded Image" style="max-width: 100%; max-height: 100px; border-radius: 4px;" />
						}
						@if (string.IsNullOrEmpty(answers[index].AnswerContent))
						{
							<span class="hover-text"><img src="./Icons/ImgIcon.png" alt="Upload Icon" style="width: 40px; height: 40px;"></span>

						}
					</label>
				}


				@if (!string.IsNullOrEmpty(answers[index].AnswerContent))
				{
					<span class="delete-answer" style="cursor:pointer;padding:3px;" @onclick:stopPropagation
						  @onclick='() => {answers[index].AnswerContent = null; answers[index].IsPhoto = false;}'>
						<img src="./Icons/DeleteIcon.svg" alt="Delete" style="width:18px;height:18px;" />
					</span>
				}
			</div>
		}
	</div>

	<style>
		.answer-container {
			overflow: visible;
			display: flex;
		}

		.answer-section {
			width: 50%;
			height: 100%;
			position: relative;
			cursor: pointer;
		}

			.answer-section:hover .hover-text {
				opacity: 1;
			}

		.hover-text {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			font-size: 1em;
			opacity: 0;
			transition: opacity 0.3s;
		}

		.delete-answer {
			display: flex;
			align-items: flex-end;
		}

		.remove-image {
			font-weight: bold;
			border-radius: 50%;
			position: absolute;
			top: -10px;
			left: -5px;
			background-color: white;
			padding: 5px;
			cursor: pointer;
		}
	</style>

	<div>
	</div>


	@* הוספת כפור למחיקת שאלה רק במידה ואנחנו במסך עריכת שאלה *@
	<div style="display:flex">
		<Tooltip TooltipText="@TooltipText">
			<input type="submit" value="שמירה" disabled="@(!IsFormValid)" class="base-button" />
		</Tooltip>
		@if (QuestionId != null)
		{
			<ConfirmPopup TitleText="מחיקת שאלה"
						  BodyText="האם אתה בטוח שברצונך למחוק את השאלה?"
						  ConfirmButtonText="מחק"
						  CancelButtonText="בטל"
						  OnConfirmClick="() => HandleDeleteQuestion()">
				<OpenButton>
					<button class="base-button" style="background-color:#f44336; ">מחיקת שאלה</button>
				</OpenButton>
			</ConfirmPopup>
		}
	</div>

</EditForm>




@code {


	[Parameter]
	public int GameId { get; set; } // מזהה משחק

	[Parameter]
	public int? QuestionId { get; set; } // מזהה שאלה אם קיים

	[Parameter]
	public EventCallback OnQuestionUpdated { get; set; } // הודעה על עדכון שאלה

	[Parameter]
	public QuestionToAdd questionToAdd { get; set; } // תבנית הוספת שאלה

	[Parameter]
	public List<AnswerToAdd> answers { get; set; } // תבנית הוספת תשובות

	[Parameter]
	public EventCallback<ToastMessage> OnShowToast { get; set; } // הודעה להצגת טוסט 

	private Guid toastKey = Guid.NewGuid(); // מזהה להצגת הודעת טקסט

	string myFileImage = ""; // משתנה לתמונה 
	long maxFileSize = 4194304; // מקסימום גודל העלאת תמונה
	private string imageBase64 = ""; // סוגי קובץ העלאת תמונה 

	string msg = "";
	string msgType = "info"; // Message type for the toast

	private string TooltipText { get; set; } = string.Empty;


	void ToggleCheckbox(int index)
	{
		answers[index].IsCorrect = !answers[index].IsCorrect;
		OnCheckboxChanged(index, answers[index].IsCorrect);
	}

	private void OnCheckboxChanged(int index, object isChecked)
	{
		answers[index].IsCorrect = (bool)isChecked;
		for (int i = 0; i < answers.Count; i++)
		{
			if (i != index)
			{
				answers[i].IsCorrect = false;
			}
		}
	}

	private void RemoveImage(int index)
	{
		answers[index].IsPhoto = false;
		answers[index].AnswerContent = null;
	}

	private bool IsFormValid
	{
		get
		{
			bool questionTextFilled = !string.IsNullOrWhiteSpace(questionToAdd.QuestionText);
			int filledAnswers = answers.Count(a => !string.IsNullOrWhiteSpace(a.AnswerContent));
			bool hasAtLeastTwoAnswers = filledAnswers >= 2;
			bool hasSelectedCorrectAnswer = answers.Any(a => a.IsCorrect && !string.IsNullOrWhiteSpace(a.AnswerContent));

			if (!questionTextFilled && !hasAtLeastTwoAnswers)
			{
				TooltipText = "יש למלא תוכן בשאלה ולפחות 2 מסיחים";
				return false;
			}
			if (!hasAtLeastTwoAnswers)
			{
				TooltipText = "יש למלא לפחות 2 מסיחים";
				return false;
			}
			if (!questionTextFilled)
			{
				TooltipText = "יש למלא טקסט בשאלה";
				return false;
			}
			if (!hasSelectedCorrectAnswer)
			{
				TooltipText = "יש לבחור בתשובה הנכונה";
				return false;
			}

			TooltipText = "";
			return true;
		}


	}

	private async Task UploadQuestionImg(InputFileChangeEventArgs e)
	{
		var imageFiles = e.GetMultipleFiles();
		foreach (var file in imageFiles)
		{
			if (file.Size <= maxFileSize)
			{
				var buffer = new byte[file.Size];
				await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
				var imageBase64 = Convert.ToBase64String(buffer);

				questionToAdd.QuestionPhoto = imageBase64;
			}
			else
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "הקובץ גדול מדי. הגודל המקסימלי הוא 4MB.", Type = "error" });
			}
		}
	}

	private async Task UploadAnswerImg(int index, InputFileChangeEventArgs e)
	{
		var imageFiles = e.GetMultipleFiles();
		foreach (var file in imageFiles)
		{
			if (file.Size <= maxFileSize)
			{
				var buffer = new byte[file.Size];
				await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
				var imageBase64 = Convert.ToBase64String(buffer);

				answers[index].AnswerContent = imageBase64;
				answers[index].IsPhoto = true;
			}
			else
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "הקובץ גדול מדי. הגודל המקסימלי הוא 4MB.", Type = "error" });
			}
		}
	}

	private async Task HandleValidSubmit()
	{
		questionToAdd.GameID = GameId;
		GameTable game = new GameTable
			{
				LastUpdated = DateTime.Now
			};

		if (!string.IsNullOrEmpty(questionToAdd.QuestionPhoto) && !questionToAdd.QuestionPhoto.Contains(".png"))
		{
			var uploadRequest = new { ImageBase64 = questionToAdd.QuestionPhoto };
			var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", uploadRequest);

			if (saveResponse.IsSuccessStatusCode)
			{
				questionToAdd.QuestionPhoto = await saveResponse.Content.ReadAsStringAsync();
			}
			else
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "Error saving image.", Type = "error" });
				return; // Exit if the image upload fails
			}
		}

		@for (int i = 0; i < answers.Count; i++)
		{
			var answer = answers[i];
			if (answer.IsPhoto && !answer.AnswerContent.Contains(".png"))
			{
				var uploadRequest = new { ImageBase64 = answer.AnswerContent };
				var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", uploadRequest);

				if (saveResponse.IsSuccessStatusCode)
				{
					answer.AnswerContent = await saveResponse.Content.ReadAsStringAsync();
				}
			};
		}

		var filledAnswers = answers.Where(a => !string.IsNullOrWhiteSpace(a.AnswerContent)).ToList();
		questionToAdd.Answers = filledAnswers;

		HttpResponseMessage questionRes;

		if (QuestionId != null)
		{
			questionRes = await Http.DeleteAsync($"api/GameData/deleteQuestion/{GameId}/{QuestionId}");
			if (questionRes.IsSuccessStatusCode)
			{
				questionRes = await Http.PostAsJsonAsync("api/GameData/addQuestion/", questionToAdd);
			}
		}
		else
		{
			questionRes = await Http.PostAsJsonAsync("api/GameData/addQuestion/", questionToAdd);
		}

		if (questionRes.IsSuccessStatusCode)
		{
			if (QuestionId != null)
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "השאלה עודכנה בהצלחה", Type = "success" });
			}
			else
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "השאלה התווספה בהצלחה", Type = "success" });
			}

			await OnQuestionUpdated.InvokeAsync();
			questionToAdd.QuestionText = "";
			questionToAdd = new QuestionToAdd();
			answers = new List<AnswerToAdd>
			{
				new AnswerToAdd(),
				new AnswerToAdd(),
				new AnswerToAdd(),
				new AnswerToAdd(),
				new AnswerToAdd(),
				new AnswerToAdd()
			};
		}
		else
		{
			string error = await questionRes.Content.ReadAsStringAsync();
			ShowError(error);
			if (QuestionId != null)
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "תקלה בעריכת שאלה: " + msg, Type = "error" });
			}
			else
			{
				await OnShowToast.InvokeAsync(new ToastMessage { Message = "תקלה בהוספת שאלה: " + msg, Type = "error" });
			}
		}
	}

	private async Task HandleDeleteQuestion()
	{
		var questionRes = await Http.DeleteAsync($"api/GameData/deleteQuestion/{GameId}/{QuestionId}");
		if (questionRes.IsSuccessStatusCode)
		{
			await OnShowToast.InvokeAsync(new ToastMessage { Message = "שאלה נמחקה בהצלחה", Type = "success" });

		}
		else
		{
			await OnShowToast.InvokeAsync(new ToastMessage { Message = "תקלה במחיקת שאלה, נסה שנית", Type = "error" });
		}

		await OnQuestionUpdated.InvokeAsync();
	}

	void ShowError(string error)
	{
		switch (error)
		{
			case "No games for this user":
				msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
				break;
			case "user is not authenticated":
				msg = "ארעה בעיה בעת אימות המשתמש";
				break;
			case "Game not created":
				msg = "ארעה בעיה בעת יצירת המשחק";
				break;
			case "Game code not created":
				msg = "ארעה בעיה בעת יצירת קוד המשחק";
				break;
			case "It's Not Your Game":
				msg = "המשחק הזה אינו שלך...";
				break;
			case "This game cannot be published":
				msg = "המשחק אינו מאושר לפרסום";
				break;
			case "Update Failed":
				msg = "בעיה בעדכון המשחק";
				break;
			case "Question not created":
				msg = "השאלה לא התווספה";
				break;
			case "Answer not created":
				msg = "התשובה לא התווספה";
				break;
			case "game ID or question ID in missing":
				msg = "משחק או שאלה לא נמצאו";
				break;
			case "question wasn't deleted":
				msg = "בעיה במחיקת שאלה";
				break;
			default:
				msg = "An unknown error occurred.";
				break;
		}
	}
}

