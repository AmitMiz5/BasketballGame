@inject HttpClient Http


<div class="tooltip-container" @onmousemove="ShowTooltipHandler" @onmouseout="HideTooltipHandler">
    @ChildContent
    @if (ShowTooltip && !string.IsNullOrWhiteSpace(TooltipText))
    {
        <div class="tooltip-box" style="top:@(TooltipPosition.Top)px; left:@(TooltipPosition.Left)px;">
            @TooltipText
        </div>
    }
</div>

<style>
    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip-box {
        position: fixed; /* Position relative to viewport */
        background-color: rgba(107, 174, 255, 0.9);
        color: #fff;
        padding: 6px 10px;
        border-radius: 4px;
        white-space: nowrap;
        z-index: 1000;
        text-align: center;
        font-size: 13px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        opacity: 1;
        visibility: visible;
    }

        .tooltip-box::after {
            content: "";
            position: absolute;
            bottom: -6px;
            left: 50%;
            transform: translateX(-50%);
            border-width: 6px;
            border-style: solid;
            border-color: rgba(107, 174, 255, 0.9) transparent transparent transparent;
        }
</style>

@code {
    private (int Top, int Left) TooltipPosition { get; set; }
    private bool ShowTooltip { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public string TooltipText { get; set; } = string.Empty;

    private void ShowTooltipHandler(MouseEventArgs e)
    {
        TooltipPosition = ((int)e.ClientY - 35, (int)e.ClientX);
        ShowTooltip = true;
    }

    private void HideTooltipHandler()
    {
        ShowTooltip = false;
    }
}
