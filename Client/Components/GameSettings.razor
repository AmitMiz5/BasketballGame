@inject HttpClient Http;
@using template.Shared.Models.Game;
@using template.Shared.Models;

<Tooltip TooltipText="הגדרות משחק">
    <button class="GamesList__action__button" @onclick="OpenPopup">
        <img src=@ImageSrc alt="Settings" class="GamesList__action__icon" />
    </button>
</Tooltip>

<div class="confirm-popup-overlay" style="display: @(isPopupOpen ? "flex" : "none");">
    <div class="confirm-popup-container">
        <img src="/Icons/BgSmallPopUp.png" alt="Popup Background Image" />

        <button class="confirm-close-button" @onclick="ClosePopup">X</button>

        <div class="confirm-popup-content">
            <div class="confirm-popup-text">
                <h3 class="confirm-popup-title">עריכת משחק</h3>
            </div>

            <EditForm Model="game" OnValidSubmit="SaveChanges">
                <DataAnnotationsValidator />

                <label style="margin-bottom: 20px;" for="gameName">שם המשחק:</label>
                <CustomInputText @bind-Value="game.GameName" maxLength="40" midLength="35" minLength="2" placeholder="שם המשחק" style="margin-bottom:20px;" />
                <ValidationMessage For="@(() => game.GameName)" class="error-message"/> 


                <label for="questionTime">זמן לכל שאלה:</label>
                <select id="questionTime" @bind="game.QuestionTime" class="confirm-popup-select" style="margin-bottom: 20px;">
                    <option value="30">30 שניות</option>
                    <option value="60">60 שניות</option>
                    <option value="90">90 שניות</option>
                    <option value="0">ללא הגבלה</option>
                </select>

                <button type="submit" class="confirm-confirm-button">שמור שינויים</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public GameTable game { get; set; } = new GameTable();

    [Parameter]
    public EventCallback OnGameUpdated { get; set; }

    [Parameter]
    public Action<ToastMessage> OnShowToast { get; set; }

    [Parameter]
    public string ImageSrc { get; set; }

    private bool isPopupOpen = false;

    private void OpenPopup()
    {
        isPopupOpen = true;
    }

    private void ClosePopup()
    {
        isPopupOpen = false;
    }

    private async Task SaveChanges()
    {
        await UpdateGame(game);
        ClosePopup();
    }

    private async Task UpdateGame(GameTable game)
    {
        var updateGameResponse = await Http.PostAsJsonAsync("api/Table/updateGameSettings", game);

        if (updateGameResponse.IsSuccessStatusCode)
        {
            if (OnGameUpdated.HasDelegate)
            {
                await OnGameUpdated.InvokeAsync();
            }

            OnShowToast?.Invoke(new ToastMessage { Message = "המשחק עודכן בהצלחה", Type = "success" });
        }
        else
        {
            string error = await updateGameResponse.Content.ReadAsStringAsync();
            OnShowToast?.Invoke(new ToastMessage { Message = "שגיאה בעדכון המשחק: " + error, Type = "error" });
        }
    }
}
