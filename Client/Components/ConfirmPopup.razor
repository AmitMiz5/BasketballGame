@inject HttpClient Http

@inject HttpClient Http
<div>
    @if (OpenButton != null)
    {
        <div @onclick="OpenPopup">
            @OpenButton
        </div>
    }
</div>

<div class="confirm-popup-overlay" style="display: @(isPopupOpen ? "flex" : "none");">
    <div class="confirm-popup-container">
        <img src="./Icons/BgSmallPopUp.png" alt="Popup Background Image" >

        <button class="confirm-close-button" @onclick="ClosePopup">X</button>

        <div class="confirm-popup-content">

            <div class="confirm-popup-text">
                <h3 class="confirm-popup-title">@TitleText</h3>
                <p class="confirm-popup-body">@BodyText</p>

            </div>
            <div class="confirm-button-container">
                <button @onclick="Cancel" class="base-button confirm-cancel-button" style="width:40%">
                    @CancelButtonText
                </button>
                <button @onclick="Confirm" class="base-button" style="width:40%">
                    @ConfirmButtonText
                </button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string TitleText { get; set; } = "Confirm";

    [Parameter]
    public string BodyText { get; set; } = "Are you sure you want to proceed?";

    [Parameter]
    public string ConfirmButtonText { get; set; } = "Confirm";

    [Parameter]
    public string CancelButtonText { get; set; } = "Cancel";

    [Parameter]
    public EventCallback OnConfirmClick { get; set; }

    [Parameter]
    public RenderFragment OpenButton { get; set; }

    private bool isPopupOpen = false;

    private void OpenPopup()
    {
        isPopupOpen = true;
    }

    private void ClosePopup()
    {
        isPopupOpen = false;
    }

    private async Task Confirm()
    {
        await OnConfirmClick.InvokeAsync();
        ClosePopup();
    }

    private void Cancel()
    {
        ClosePopup();
    }
}
